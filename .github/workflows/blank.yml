name: CI
on:
  pull_request:
  push:
    branches:
      - main
jobs:
  build-and-test:
    defaults:
      run:
        working-directory: client
    strategy:
      matrix:
        target: ['web', 'lib', 'electron']

    name: Client Tests
    runs-on: ubuntu-latest
    steps:
    -
      uses: actions/checkout@v2
    - 
      uses: actions/setup-node@v2
      with:
        node-version: '16.14.2'
    -
      name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    -
      uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - 
      name: Yarn install
      run: yarn install --frozen-lockfile
    -
      name: Lint
      if: ${{ matrix.target == 'web' }}
      run: yarn lint
    -
      name: Lint templates
      if: ${{ matrix.target == 'web' }}
      run: yarn lint:templates
    - 
      name: Run tests
      if: ${{ matrix.target == 'web' }}
      run: yarn test --collect-coverage
    -
      name: Build Web
      if: ${{ matrix.target == 'web' }}
      run: yarn build:web
      env:
        SENTRY_AUTH_TOKEN: ${{ github.ref == 'refs/heads/main' && secrets.SENTRY_AUTH_TOKEN || '' }}
    - 
      name: Build lib
      if: ${{ matrix.target == 'lib' }}
      run: yarn build:lib
    -
      name: Build electron
      if: ${{ matrix.target == 'electron' }}
      run: yarn build:electron

  test-server:
    defaults:
      run:
        working-directory: server
    name: Server Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install tox
      run: |
        python -m pip install --upgrade pip;
        pip install tox;
    - name: Run tests
      run: tox
